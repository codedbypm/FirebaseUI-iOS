# This is a basic workflow to help you get started with Actions

name: Release Carthage FirebaseAuthUI.framework

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'The version of FirebaseAuthUI.framework'
        required: true
      

jobs:
  build:
    runs-on: macos-latest
    env:
      working-directory: ./Auth

    steps:
      - uses: actions/checkout@v2

      - name: Setup environment
        run: |
          export SHA8=$(git rev-parse --short=8 ${{ github.sha }})
          export GCS_BUCKET_OBJECT_DIR=${{ secrets.GCS_BUCKET }}/${{ github.event.inputs.version }}
          export GCS_BUCKET_OBJECT_NAME=FirebaseAuthUI-$SHA8.zip

          echo "GCS_BUCKET_OBJECT_NAME=$GCS_BUCKET_OBJECT_NAME" >> $GITHUB_ENV
          echo "GCS_BUCKET_OBJECT_PATH=$GCS_BUCKET_OBJECT_DIR/$GCS_BUCKET_OBJECT_NAME" >> $GITHUB_ENV
          echo "DEPLOY_DIR=${{ env.working-directory }}/Carthage/Build/iOS" >> $GITHUB_ENV
          
      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.2.1
        with:
          xcode-version: 11.7

      # Run Carthage bootstrap
      - name: Carthage bootstrap
        run: carthage bootstrap
        working-directory: ${{env.working-directory}}

      # # Run Carthage build
      # - name: Carthage build
      #   run: carthage build --no-skip-current --log-path ./carthage.log
      #   working-directory: ${{ env.working-directory }}

      # # Zip the artifact
      # - name: Zip FirebaseAuthUI.framework 
      #   working-directory: ${{ env.DEPLOY_DIR }}
      #   run: |
      #     zip -r ${{ env.GCS_BUCKET_OBJECT_NAME }} FirebaseAuthUI.framework

      # # Upload to Google Cloud Storage
      # - name: Upload to Google Cloud Storage
      #   uses: google-github-actions/upload-cloud-storage@main
      #   with:
      #     credentials: ${{ secrets.GCS_SA_KEY }}
      #     path: ${{ env.DEPLOY_DIR }}/${{ env.GCS_BUCKET_OBJECT_NAME }}
      #     destination: ${{ env.GCS_BUCKET_OBJECT_PATH }}
      
      # # Create a github Release
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     body:
      #     tag_name: v${{ github.event.inputs.version }}-carthage
      #     release_name: Release v${{ github.event.inputs.version }}-carthage
      #     draft: false
      #     prerelease: false          
      
      # # Upload release artifacts
      # - name: Upload Release artifacts
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps           upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./Carthage/Build/iOS/FirebaseAuthUI.framework
      #     asset_name: FirebaseAuthUI.framework
      #     asset_content_type: application/zip          
