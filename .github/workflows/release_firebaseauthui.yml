# This is a basic workflow to help you get started with Actions

name: Release Carthage FirebaseAuthUI.framework

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'The version of FirebaseAuthUI.framework'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest
    env:
      working-directory: ./Auth

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.2.1
        with:
          xcode-version: 11.7

      # Run Carthage bootstrap
      - name: Carthage bootstrap
        run: carthage bootstrap
        working-directory: ${{env.working-directory}}

      # # Run Carthage build
      # - name: Carthage build
      #   run: carthage build --no-skip-current --log-path ./carthage.log
      #   working-directory: ${{env.working-directory}}

      # Setup gcloud/gsutil
      - name: Setup - gcloud / gsutil
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_SA_KEY }}
          project_id: ${{ secrets.GCS_PROJECT }}
          export_default_credentials: true

      # # Zip the artifact
      # - name: Zip FirebaseAuthUI.framework 
      #   run: zip -r FirebaseAuthUI.zip FirebaseAuthUI.framework
      #   working-directory: ${{env.working-directory}}/Carthage/Build/iOS

      # Upload 
      - name: Upload to Google Cloud Storage
        run: |
          export SHA8=$(git rev-parse --short=8 ${{ github.sha }})
          export GCS_OBJECT_NAME=${{ secrets.GCS_BUCKET }}/${{ github.event.inputs.version }}/FirebaseAuthUI-$SHA8.zip
          echo $GCS_OBJECT_NAME
#          gsutil cp FirebaseAuthUI.zip gs://$GCS_OBJECT_NAME
        working-directory: ${{env.working-directory}}/Carthage/Build/iOS

      # # Create a github Release
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     body:
      #     tag_name: v${{ github.event.inputs.version }}-carthage
      #     release_name: Release v${{ github.event.inputs.version }}-carthage
      #     draft: false
      #     prerelease: false          
      
      # # Upload release artifacts
      # - name: Upload Release artifacts
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps           upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./Carthage/Build/iOS/FirebaseAuthUI.framework
      #     asset_name: FirebaseAuthUI.framework
      #     asset_content_type: application/zip          
