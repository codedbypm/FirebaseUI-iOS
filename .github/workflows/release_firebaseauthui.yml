# This is a basic workflow to help you get started with Actions

name: Release Carthage FirebaseAuthUI.framework

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'The version of FirebaseAuthUI.framework'
        required: true
      
jobs:
  build:
    runs-on: macos-latest
    env:
      WORKING-DIR: ./Auth
      PRODUCT_NAME: FirebaseAuthUI   
      GCS_PUBLIC_URL: https://storage.googleapis.com

    steps:

      - uses: actions/checkout@v2

      # Configure environment variables
      - name: Setup environment
        run: |
          export SHA16=$(git rev-parse --short=16 ${{ github.sha }})
          
          export GCS_ZIP_NAME=${{ env.PRODUCT_NAME }}-$SHA16.zip
          echo "GCS_ZIP_NAME=$GCS_ZIP_NAME" >> $GITHUB_ENV
          echo "GCS_ZIP_UPLOAD_DIR=${{ secrets.GCS_BUCKET }}/firebase-ui/${{ github.event.inputs.version }}" >> $GITHUB_ENV
          
          export GCS_JSON_NAME=${{ env.PRODUCT_NAME }}.json
          echo "GCS_JSON_NAME=$GCS_JSON_NAME" >> $GITHUB_ENV
          echo "GCS_JSON_PUBLIC_URL=${{ env.GCS_PUBLIC_URL }}/${{ secrets.GCS_BUCKET }}/firebase-ui/$GCS_JSON_NAME" >> $GITHUB_ENV
          
          echo "GCS_BUCKET_PUBLIC_URL=${{ env.GCS_PUBLIC_URL }}/${{ secrets.GCS_BUCKET }}" >> $GITHUB_ENV

          echo "DEPLOY_DIR=${{ env.WORKING-DIR }}/Carthage/Build/iOS" >> $GITHUB_ENV
          
      # Setup Xcode version          
      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.2.1
        with:
          xcode-version: 11.7

      # Run Carthage bootstrap
      - name: Carthage bootstrap
        run: carthage bootstrap
        working-directory: ${{ env.WORKING-DIR }}

      # Run Carthage build
      - name: Carthage build
        run: carthage build --no-skip-current --log-path ./carthage.log
        working-directory: ${{ env.WORKING-DIR }}

      # Zip the artifact
      - name: Zip ${{ env.PRODUCT_NAME }}.framework 
        working-directory: ${{ env.DEPLOY_DIR }}
        run: |
          zip -r ${{ env.GCS_ZIP_NAME }} ${{ env.PRODUCT_NAME }}.framework

      # Setup gcloud and gsutil CLI
      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Upload build to Google Cloud Storage
      - name: Upload build to Google Cloud Storage
        id: upload-to-gcs-step
        working-directory: ${{ env.DEPLOY_DIR }}
        run: |
          gsutil \
          -h "Content-Type:application/zip" \
          -h "Cache-Control:no-cache, max-age=0" \
          cp ${{ env.GCS_ZIP_NAME }} gs://${{ env.GCS_ZIP_UPLOAD_DIR }}/

      # Update Carthage framework json file
      - name: Update ${{ env.GCS_JSON_NAME }} file
        working-directory: ${{ env.WORKING-DIR }}
        run: |
          key=${{ github.event.inputs.version }}
          value=${{ env.GCS_BUCKET_PUBLIC_URL }}/${{ steps.upload-to-gcs-step.outputs.uploaded }}
          curl ${{ env.GCS_JSON_PUBLIC_URL }} | jq --arg version "$key" --arg url "$value" '.[$version] = $url' > ${{ env.GCS_JSON_NAME }}
          
      # Upload updated JSON to Google Cloud Storage
      - name: Upload ${{ env.GCS_JSON_NAME }} to Google Cloud Storage
        working-directory: ${{ env.WORKING-DIR }}
        run: |
          gsutil -h "Content-Type:application/json" -h "Cache-Control:no-cache, max-age=0" cp ${{ env.GCS_JSON_NAME }} gs://${{ secrets.GCS_BUCKET }}/firebase-ui

      # # Create a github Release
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     body:
      #     tag_name: v${{ github.event.inputs.version }}-carthage
      #     release_name: Release v${{ github.event.inputs.version }}-carthage
      #     draft: false
      #     prerelease: false          
      
      # # Upload release artifacts
      # - name: Upload Release artifacts
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps           upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./Carthage/Build/iOS/FirebaseAuthUI.framework
      #     asset_name: FirebaseAuthUI.framework
      #     asset_content_type: application/zip          
